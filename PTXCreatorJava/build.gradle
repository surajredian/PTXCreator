/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.10.2/userguide/java_library_plugin.html
 */

buildscript {
	repositories {
		flatDir dirs: './proguard/lib'
	}
	dependencies {
		classpath ':proguard:'
	}
}

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    id 'maven'
    id 'maven-publish'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

def tempMavenRepoFolder = file(".temp_mvnRepo")
def obfuscatedJar = file("build/libs/PTXCreator-obfuscated.jar")

dependencies {
	compile 'com.google.code.gson:gson:2.2.4'
	compile 'net.lingala.zip4j:zip4j:1.3.2'
	compile 'commons-io:commons-io:2.6'
	
    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    maven {
		url "http://artifactory.diagnostics.kpit.com/kpit-central/"
	}
	jcenter() 
}

//create a Fat Jar with all dependencies
task fatJar(type: Jar) {
	manifest {
        attributes 'Main-Class': 'com.kpit.ptxcreator.standalone.StandalonePTXCreator'
    }
	classifier = 'standalone'
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
}

task copyDependencies(type: Copy) {
   from configurations.compile   
   into 'dependencies'
}

task proguard(type: proguard.gradle.ProGuardTask) {
	outputs.upToDateWhen { false }
	configuration 'proguard.pro'
	doLast {
		delete 'dependencies'
	}
}

proguard.dependsOn copyDependencies

artifacts {
	archives (obfuscatedJar) {
		classifier 'obfuscated'
		builtBy proguard
	}
}

uploadArchives {
	doFirst {
		delete "${tempMavenRepoFolder}"
	}
    repositories {
        mavenDeployer {
            repository(url: ("file:///" + "$tempMavenRepoFolder"))
			pom.version = buildVersion
			pom.artifactId = projectName
			pom.groupId = 'com.kpit.ptx-creator'
        }
    }
}

task repoZip(type: Zip) {
	archiveName =  "mvnRepo.zip"
	destinationDir = file(".")
	from "${tempMavenRepoFolder}"
	
	doLast {
		delete "${tempMavenRepoFolder}"
	}
}

repoZip.dependsOn uploadArchives